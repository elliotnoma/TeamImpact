window.onload = function () {

    var dps = []; // dataPoints

    var chart = new CanvasJS.Chart("chartContainer",{
        title :{
            text: "Live Random Data"
        },
        data: [{
            type: "line",
            dataPoints: dps 
        }]
    });

    var xVal = 0;
    var yVal = 100;
    var updateInterval = 20;
    var dataLength = 500; // number of dataPoints visible at any point

    var updateChart = function (count) {
        count = count || 1;
        // count is number of times loop runs to generate random dataPoints.
        
        for (var j = 0; j < count; j++) {
            yVal = yVal +  Math.round(5 + Math.random() *(-5-5));
            dps.push({
                x: xVal,
                y: yVal
            });
            xVal++;
        };
        if (dps.length > dataLength)
        {
            dps.shift();
        }
        
        chart.render();

    };

    // generates first set of dataPoints
    updateChart(dataLength); 

    // update chart after specified time. 
    setInterval(function(){updateChart()}, updateInterval); 

}


$(function(){
    var socketio = window.socketio = io()

    ////////////////////////////////////////////////////////////////
    //Control Panel
    var PanelData = Backbone.Model.extend({
        defaults: {
            chartWidth: 300
            , defaultChartWidth: 300

            , updateInterval: 200
        }
    })
    var Panel = Backbone.View.extend({
        el: $('#toppanel')
        ,$panel: $('#toppanel > .panel')
        ,$menubar: $('#topmenubar > .menubar')
        ,$openClose: $("#toppanel   .menubar   .tab   .toggle   span")
        ,initialize: function(){
            this.model = new PanelData
            this.open_panel()
        }
        ,events: {
            'click .tab .open': 'expand'
            ,'click .tab .close': 'collapse'
            ,'click .tab .toggle span': 'toggle_tab'
        }
        ,render: function(){
            
        }
        ,toggle_tab: function(){
            this.$openClose.toggle()
        }
        ,collapse: function(){
            this.$panel.slideUp("slow")
        }
        ,expand: function(){
            this.$panel.slideDown("slow")
        }
        ,open_panel: function open_panel(){
            this.$panel.show();
            this.toggle_tab();
        }
    })
    var panel = new Panel


    ////////////////////////////////////////////////////////////////
    //Graph
    var PlotData = Backbone.Model.extend({
        defaults: function(){
            var data = []
            , defaultWidth = panel.model.attributes.defaultChartWidth
            for( var x = 0; x < defaultWidth; x++)
                data[x]=[x,0]
            return {
                data: data
                ,chartWidth: defaultWidth
                ,min: 0
                ,max: 0
            }
        }
        , initialize: function(){
            this.resetMinAndMax()
        }
        , zeroPlot: function(){
            var data = []
            , chartWidth = this.attributes.chartWidth

            for( var x = 0; x < chartWidth; x++)
                data[x]=[x,0]
            this.set('data',data)
        }
        , getMinAndMax: function getMinAndMax (){
            var newmin = null
            , newmax
            for(var y = 0; y < this.chartWidth; y++){
                var thispoint = this.chartData[y][1]
                if( newmin === void 0 ){
                    newmin = newmax = thispoint
                } else {
                    if(thispoint < newmin) newmin = parseInt(thispoint)
                    else if(thispoint > newmax) newmax = parseInt(thispoint)
                }
            }
            return [newmin, newmax]
        }
        , resetMinAndMax: function(){
            var minmax = this.getMinAndMax()
            if( minmax[0] < this.attributes.min) this.set('min', minmax[0])
            if( minmax[1] > this.attributes.max) this.set('max', minmax[1])
        }
    })

    var PlotCollection = Backbone.Collection.extend({
        model: PlotData
    })

    var PlotView = Backbone.View.extend({
        initialize: function(){
            var mattr = this.model.attributes
            this.plot = $.plot("#chart", [mattr.data], {
	             series: {
		              shadowSize: 0	// Drawing is faster without shadows
	             },
	             yaxis: {
		              min: mattr.min,
		              max: mattr.max
	             },
	             xaxis: {
		              show: false
	             }
            })
        }
        ,update: function update() {

	         plot.setData(data4chart)

            if(0){ //only increase y axes
                var newminmax = getMinAndMax()
                
                if(minmax[0] > newminmax[0] || minmax[1] < newminmax[1]) {
                    minmax = newminmax
                    resetAxes()
                }
            } else { // increase and decrease y axes
                var newminmax = getMinAndMax()
                , o = plot.getOptions().yaxes[0]
                if( o.min != newminmax[0] || o.max != newminmax[1]) {
                    minmax = newminmax
                    resetAxes()
                }
            }
            
	         plot.draw()
        }
        , resetAxes: function resetAxes (){
            var mattr = this.model.attributes
            var o = this.plot.getOptions().yaxes[0]
            o.min = mattr.min
            o.max = mattr.max
            this.plot.setupGrid()
        }
    })

    var MainView = Backbone.View.extend({
        el: $('body > main')
        ,initialize: function(){
            this.plotData = new PlotData({
                
            })
            this.plotView = new PlotView({
                model: this.plotData
            })
            this.plotCollection = new PlotCollection({

            })
        }
    })

    var mainView = new MainView

    ////////////////////////////////////////////////////////////////
    //Main App

    var MainApp = Backbone.View.extend({
        el: $('body')
        ,$head: $('#data')
        ,data: {}
        ,initialize: function(){
            this.counter = 0

            this.panel = panel
            this.conf = panel.model.attributes
            this.mainView = mainView

            this.initialize_socket()
        }
        ,events: {

        }
        ,socket_events: {
            'connected': 'onConnected'
            ,'message': 'onMessage'
        }
        ,onMessage: function(id, time, reading){
            var split = reading.split('|')
            , gyro = split[0].split(' ')
            , mag = split[1].split(' ')
            , acc = split[2].split(' ')
            , angle = split[3].slice(0,-1).split(' ')

            , thisone = {
                time: time
                ,gyro: gyro
                ,mag: mag
                ,acc: acc
                ,pitch: angle[0]
                ,roll: angle[1]
                ,yaw: angle[2]
            }

            this.data[id] = thisone

            var index = parseInt(time/ this.conf.updateInterval) % this.conf.chartWidth

            // callbacks.forEach(function(callback,i){
            //     callback( i, index, thisone)
            // })


            if( !(this.counter++ % 9) ) this.$head.html(id +': '+ reading)

            //        update()
        }
        ,onConnected: function(){
            ([]).concat(arguments).forEach(function(v,i){
                console.log(i+':',v)
            })
        }
    })

    var mainApp = window.mainApp = new MainApp

})


// for( var y = 0, l = callbacks.length; y<l; y++){
//     data4chart[y] = []
//     for( var x = 0; x<chartWidth; x++) data4chart[y][x]=[x,0]
// }


// , callbacks = [
//     function(me,index,thisone){data4chart[me][index] = [ index, thisone.pitch ] }
//     ,function(me,index,thisone){data4chart[me][index] = [ index, thisone.roll ] }
//     // ,function(me,index,thisone){data4chart[me][index] = [ index, thisone.yaw ] }
//     // ,
//     // function(me,index,thisone){data4chart[me][index] = [ index, thisone.gyro[0] ] }
//     // ,function(me,index,thisone){data4chart[me][index] = [ index, thisone.gyro[1] ] }
//     // ,function(me,index,thisone){data4chart[me][index] = [ index, thisone.gyro[2] ] }
//     // ,
//     // function(me,index,thisone){data4chart[me][index] = [ index, thisone.acc[0]/2 ] }
//     // ,function(me,index,thisone){data4chart[me][index] = [ index, thisone.acc[1]/2 ] }
//     // ,function(me,index,thisone){data4chart[me][index] = [ index, thisone.acc[2]/2 ] }
//     // ,
//     // function(me,index,thisone){data4chart[me][index] = [ index, thisone.acc[0] ] }
//     // ,function(me,index,thisone){data4chart[me][index] = [ index, thisone.acc[1] ] }
//     // ,function(me,index,thisone){data4chart[me][index] = [ index, thisone.acc[2] ] }
//     // ,
//     // function(me,index,thisone){data4chart[me][index] = [ index, thisone.mag[0] ] }
//     // ,function(me,index,thisone){data4chart[me][index] = [ index, thisone.mag[1] ] }
//     // ,function(me,index,thisone){data4chart[me][index] = [ index, thisone.mag[2] ] }
// ]


// function getMinAndMax (){
//     var newmin = null
//     , newmax

//     for(var x = 0, l = data4chart.length; x<l; x++){
//         for(var y = 0; y<chartWidth; y++){
//             var thispoint = data4chart[x][y][1]
//             if( newmin === void 0 ){
//                 newmin = newmax = thispoint
//             } else {
//                 if(thispoint < newmin) newmin = parseInt(thispoint)
//                 if(thispoint > newmax) newmax = parseInt(thispoint)
//             }
//         }
//     }

//     return [newmin, newmax]
// }

// function update() {

//     plot.setData(data4chart)

//     if(0){ //only increase y axes
//         var newminmax = getMinAndMax()

//         if(minmax[0] > newminmax[0] || minmax[1] < newminmax[1]) {
//             minmax = newminmax
//             resetAxes()
//         }
//     } else { // increase and decrease y axes
//         var newminmax = getMinAndMax()
//         , o = plot.getOptions().yaxes[0]
//         if( o.min != newminmax[0] || o.max != newminmax[1]) {
//             minmax = newminmax
//             resetAxes()
//         }
//     }

//     plot.draw()

// }

// function resetAxes (){
//     var o = plot.getOptions().yaxes[0]
//     o.min = minmax[0]
//     o.max = minmax[1]
//     plot.setupGrid()
// }
